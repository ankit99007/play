
1---------------
apiVersion: v1 
kind: Pod 
metadata: 
  name: fresco-nginx-pod 
spec: 
  containers: 
  - name: fresco-nginx-container 
    image: nginx 
    env: 
      - name: SERVER_URL_ENV 
        valueFrom: 
          configMapKeyRef: 
            name: fresco-config 
            key: SERVER_URL
------------

apiVersion: v1 
kind: Pod 
metadata:  
  name: fresco-nginx-pod 
spec: 
  containers: 
  - name: fresco-nginx-container 
    image: nginx 
    env: 
    - name: SERVER_URL_ENV 
      valueFrom: 
        configMapKeyRef: 
          name: fresco-config 
          key: SERVER_URL 
    volumeMounts: 
    - name: fresco-secret 
      mountPath: "/etc/test" 
  volumes: 
  - name: fresco-secret
    secret: 
      secretName: fresco-secret

-----------------------

apiVersion: v1 
kind: Pod 
metadata: 
  name: fresco-nginx-pod 
spec: 
  containers: 
  - name: fresco-nginx-container 
    image: nginx
    env:
    - name: SERVER_URL_ENV
      valueFrom: 
        configMapKeyRef:
            name:fresco-config
            key:SERVER_URL
   
    volumeMounts: 
    - name: fresco-secret
      mountPath:"/etc/test"
    - name:fresco-pvc
      mountPath:"/usr/share/nginx/html"
  volumes: 
  - name: fresco-secret
    secret:
      secretName:fresco-secret
  - name:fresco-pvc
    persistentVolumeClaim: 
      claimName: fresco-pvc

------------
apiVersion: v1
kind: PersistentVolume 
metadata: 
  name: fresco-pv 
spec: 
  storageClassName: manual
  capacity: 
    storage: 100M 
  accessModes: 
    - ReadWriteOnce 
  hostPath: 
    path: "/tmp/fresco"

-----------
apiVersion: v1 
kind: PersistentVolumeClaim 
metadata: 
  name: fresco-pvc 
spec:
  accessModes: 
    - ReadWriteOnce 
  resources: 
    requests: 
      storage: 50M

---------------
kubectl create namespace dev 
openssl genrsa -out emp.key 2048 
openssl req -new -key emp.key -out emp.csr -subj "/CN=emp/O=dev" 
openssl x509 -req -in emp.csr -CA ~/.minikube/ca.crt -CAkey ~/.minikube/ca.key -CAcreateserial -out emp.crt -days 500 
kubectl config set-context dev-ctx --cluster=minikube --namespace=dev --user=emp
kubectl config set-credentials emp --client-certificate=./emp.crt --client-key=./emp.key  

------------
nginx-pod.yaml

apiVersion: v1
kind:pod
metadata:
  name:nginx
  namespace:dev
spec:
  containers:
  - name:nginx
    image:nginx

----------
kind: Role 
apiVersion: rbac.authorization.k8s.io/v1 
metadata: 
  namespace: dev 
  name: emp-role 
rules: 
- apiGroups: ["","extensions","apps"] 
  resources: [ "deployments","pods"] 
  verbs: ["get", "run"]

-------------------
kind: RoleBinding 
apiVersion: rbac.authorization.k8s.io/v1
metadata: 
  name: emp-bind 
  namespace: dev 
subjects: 
- kind: User 
  name: emp 
  apiGroup: "" 
roleRef: 
  kind: Role 
  name: emp-role 
  apiGroup: ""
------------------------

kubectl apply -f emp-bind.yaml 
kubectl create clulsterrolebinding myname-cluster-admin-binding --clusterrole=cluster-admin --user=emp
